# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '72872e03-0725-4113-a37e-0cd7f4cf3226'
  imageRepository: 'app/imagejavaapp'
  containerRegistry: 'azurecontainerregistry27.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ec2'

stages:
- stage: Scan
  jobs:
  - job: scanning
    displayName: scancloud
    pool:
       name: default
       vmImage: $(vmImageName)
    steps:
    - task: CodeScanCloudPrepare@1
      inputs:
        CodeScanCloud: 'codescan'
        organization: 'girish-gowda89960'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'GIRIOGOWDA'
        cliProjectName: 'gowdagirish222gg'
        cliSources: '.'
    - task: CodeScanCloudPublish@1
      inputs:
        pollingTimeoutSec: '30'
    - task: CodeScanCloudAnalyze@1

- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: default
      vmImage: $(vmImageName)
    steps:
    
   
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - bash: echo Contents in System Default Working Directory; ls -R $(System.DefaultWorkingDirectory)
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: 'manifest'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
        OverWrite: true
    - bash: echo After copying to Build Artifact Directory; ls -R $(Build.ArtifactStagingDirectory) 

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'manifest'
        publishLocation: 'Container'
 
    
        
